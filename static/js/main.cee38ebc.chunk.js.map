{"version":3,"sources":["apiStore.js","card.js","chart.js","dashboard.js","serviceWorker.js","index.js"],"names":["ApiStore","getGlobalCount","axios","get","getCountryCount","code","getCountryChartCount","selectedDate","moment","subtract","format","getCountryCodes","Card","props","className","label","count","Chart","width","height","data","labels","chartLabels","datasets","fill","lineTension","color","backgroundColor","pointBackgroundColor","borderColor","borderWidth","confirmedLine","deathLine","recoveredLine","options","title","display","legend","position","require","Dashboard","useState","globalCount","setGlobalCount","countryCount","setCounrtyCount","countryList","setCountryList","searchKey","setSearchKey","setChartLabels","setConfirmedLine","setDeathLine","setRecoveredLine","selectedCountry","setSelectedCountry","Date","changeSelectedCountry","country","countryData","key","alpha3Code","onClick","bind","name","useEffect","then","response","Confirmed","result","confirmed","Deaths","deaths","Recovered","recovered","Active","error","Object","keys","forEach","push","date","map","one","showCards","details","onChange","event","val","target","value","placeholder","length","filter","o","toLowerCase","includes","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cee38ebc.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst ApiStore = {\r\n    getGlobalCount : () => {\r\n        return axios.get('https://covidapi.info/api/v1/global');\r\n      },\r\n    \r\n    getCountryCount : (code) => {\r\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/latest`);\r\n    },\r\n\r\n    getCountryChartCount : (code, selectedDate, moment) => {\r\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/timeseries/${moment(selectedDate).subtract(30 ,'days').format('YYYY-MM-DD')}/${moment(selectedDate).format('YYYY-MM-DD')}`);\r\n    },\r\n\r\n    getCountryCodes : () => {\r\n    return axios.get(`https://restcountries.eu/rest/v2/all`);\r\n    }\r\n}\r\n\r\nexport default ApiStore;\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"cards\">\r\n            <div className={`${props.label}-card`}>{props.label}</div>\r\n            <div className=\"count\">{props.count}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Chart = (props) => {\r\n    return (\r\n        <Line\r\n                width={500}\r\n                height={180}\r\n                data={{\r\n                  labels: props.chartLabels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Confirmed',\r\n                      fill: false,\r\n                      lineTension: 0.5,\r\n                      color: 'rgb(239,245,252,1)',\r\n                      backgroundColor: 'rgb(68,138,255,1)',\r\n                      pointBackgroundColor: 'rgb(68,138,255,0.8)',\r\n                      borderColor: 'rgb(68,138,255,1)',\r\n                      borderWidth: 2,\r\n                      data: props.confirmedLine\r\n                    },\r\n                    {\r\n                      label: 'Deaths',\r\n                      fill: false,\r\n                      lineTension: 0.5,\r\n                      color: 'rgb(239,245,252,1)',\r\n                      backgroundColor: 'rgb(255,82,82,1)',\r\n                      pointBackgroundColor: 'rgb(255,82,82,0.8)',\r\n                      borderColor: 'rgb(255,82,82,1)',\r\n                      borderWidth: 2,\r\n                      data: props.deathLine\r\n                    },\r\n                    {\r\n                      label: 'Recovered',\r\n                      fill: false,\r\n                      lineTension: 0.5,\r\n                      color: 'rgb(239,245,252,1)',\r\n                      backgroundColor: 'rgb(178,255,89,1)',\r\n                      pointBackgroundColor: 'rgb(178,255,89,0.8)',\r\n                      borderColor: 'rgb(178,255,89,1)',\r\n                      borderWidth: 2,\r\n                      data: props.recoveredLine\r\n                    }\r\n                  ]\r\n                }}\r\n                options={{\r\n                  title: {\r\n                    display: false\r\n                  },\r\n                  legend: {\r\n                    display: true,\r\n                    position: 'top'\r\n                  }\r\n                }}\r\n              />\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ApiStore from './apiStore'\nimport Card from './card';\nimport Chart from './chart';\n\nconst moment = require('moment');\n\nconst Dashboard = () => {\n  const [globalCount, setGlobalCount] = useState({});\n  const [countryCount, setCounrtyCount] = useState({});\n  const [countryList, setCountryList] = useState([]);\n  const [searchKey, setSearchKey] = useState('');\n  const [chartLabels, setChartLabels] = useState([]);\n  const [confirmedLine, setConfirmedLine] = useState([]);\n  const [deathLine, setDeathLine] = useState([]);\n  const [recoveredLine, setRecoveredLine] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState({ \"name\": 'India', \"alpha3Code\": \"IND\" });\n\n  const selectedDate = new Date();\n\n  const changeSelectedCountry = (country) => {\n    setSelectedCountry(country);\n  }\n\n  // To list the countries with and without search \n  const countryListData = () => {\n    if (searchKey) {\n      let result = countryList.filter(o => o.name.toLowerCase().includes(searchKey.toLowerCase()));\n      return result.map((country) => countryData(country));\n    } else {\n      return countryList.map((country) => countryData(country));\n    }\n  }\n\n  // Returns each contry list row\n  const countryData = (data) => {\n    return (\n      <div key={data.alpha3Code} className=\"country-row\" onClick={changeSelectedCountry.bind(null, data)}>\n        {data.name}\n      </div>\n    )\n  }\n\n  // Search for country\n  const searchHandler = (event) => {\n    const val = event.target.value;\n    setSearchKey(val);\n  }\n\n  useEffect(() => {\n    // Gets the global count\n    ApiStore.getGlobalCount().then((response) => {\n      setGlobalCount({\n        Confirmed: response.data.result.confirmed,\n        Deaths: response.data.result.deaths,\n        Recovered: response.data.result.recovered,\n        Active: response.data.result.confirmed - response.data.result.recovered - response.data.result.deaths\n      });\n    }, (error) => {\n      setGlobalCount({\n        \"Confirmed\": \"NA\",\n        \"Deaths\": \"NA\",\n        \"Recovered\": \"NA\",\n        \"Active\": \"NA\"\n      })\n    });\n  }, []);\n\n  useEffect(() => {\n    // Gets the country count for the last available day and for the last 30 days for the chart plot\n    // Takes 3 letter code of country to fetch the data \n    ApiStore.getCountryCount(selectedCountry.alpha3Code).then((response) => {\n      const data = Object.keys(response.data.result);\n      data.forEach((key) => {\n        setCounrtyCount({\n          Confirmed: response.data.result[key].confirmed,\n          Deaths: response.data.result[key].deaths,\n          Recovered: response.data.result[key].recovered,\n          Active: response.data.result[key].confirmed - response.data.result[key].recovered - response.data.result[key].deaths\n        });\n      })\n    }, (error) => {\n      setCounrtyCount({\n        \"Confirmed\": \"NA\",\n        \"Deaths\": \"NA\",\n        \"Recovered\": \"NA\",\n        \"Active\": \"NA\"\n      })\n    });\n\n    ApiStore.getCountryChartCount(selectedCountry.alpha3Code, selectedDate, moment).then((response) => {\n      const data = Object.keys(response.data.result);\n      const labels = [];\n      const confirmed = [];\n      const recovered = [];\n      const deaths = [];\n      data.forEach((key) => {\n        confirmed.push(response.data.result[key].confirmed);\n        recovered.push(response.data.result[key].recovered);\n        deaths.push(response.data.result[key].deaths);\n        labels.push(moment(response.data.result[key].date, 'YYYY-MM-DD').format('MMM DD'));\n      })\n      setChartLabels(labels);\n      setConfirmedLine(confirmed);\n      setDeathLine(deaths);\n      setRecoveredLine(recovered);\n    }, (error) => {\n    });\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    // To get the countyr list and the corresponding 3 letter codes to get the covid data\n    ApiStore.getCountryCodes().then((response) => {\n      const filteredlist = [];\n      filteredlist.push(response.data.map((one) => {\n        return ({ 'name': one.name, 'code': one.alpha3Code })\n      }));\n      setCountryList(response.data);\n    })\n  }, []);\n\n  // Shows individual counts \n  const showCards = (details) => {\n    const data = Object.keys(details);\n    return data.map((key) => {\n      return <Card label={key} count={details[key]} />\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className=\"header\">\n          <span className=\"title\">COVID19</span>\n          <span className=\"date\">{moment(selectedDate).format('DD/MM/YYYY')}</span>\n        </div>\n        <div className=\"display-flex\">\n          <div className=\"card-block\">\n            <div className=\"card-container-title\">World</div>\n            <div className=\"card-container\">\n              {showCards(globalCount)}\n            </div>\n          </div>\n          <div className=\"card-block no-boder\">\n            <div className=\"card-container-title\">{selectedCountry.name}</div>\n            <div className=\"card-container\">\n              {showCards(countryCount)}\n            </div>\n          </div>\n        </div>\n        <div className=\"details-container\">\n          <div className=\"left-panel\">\n            <input className=\"search-field\" onChange={searchHandler} value={searchKey} placeholder=\"Search by Country\" ></input>\n            <div className=\"country-list\">\n              {countryList && countryList.length ? countryListData() : <span>No list</span>}\n            </div>\n          </div>\n          <div className=\"right-panel\">\n            <div className=\"chart-container\">\n              <Chart chartLabels={chartLabels} confirmedLine={confirmedLine} deathLine={deathLine} recoveredLine={recoveredLine} />\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"credits\">\n            <div>API : <code><a href=\"https://covidapi.info/\" rel=\"noopener noreferrer\" target=\"_blank\"> covidapi.info</a></code></div>\n            <div className=\"margin-left-20\">Dataset : <code><a href=\"https://github.com/CSSEGISandData/COVID-19\" rel=\"noopener noreferrer\" target=\"_blank\"> John Hopkins University</a></code></div>\n            <div className=\"margin-15\">\n              <code className=\"made-by\">Coded with <FavoriteIcon className=\"love\" /> by Prajwal\n              <a href=\"https://github.com/PrajwalMathad\" rel=\"noopener noreferrer\" target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n              </code>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Dashboard from './dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}