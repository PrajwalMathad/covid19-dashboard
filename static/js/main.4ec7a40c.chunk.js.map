{"version":3,"sources":["apiStore.js","card.js","chart.js","dashboard.js","serviceWorker.js","index.js"],"names":["ApiStore","getGlobalCount","axios","get","getCountryCount","code","getCountryChartCount","selectedDate","moment","subtract","format","getCountryCodes","Card","props","className","label","count","Chart","width","height","data","labels","chartLabels","datasets","fill","lineTension","color","backgroundColor","pointBackgroundColor","borderColor","borderWidth","confirmedLine","deathLine","options","title","display","legend","position","require","Dashboard","useState","summary","setSummary","globalCount","setGlobalCount","countryCount","setCounrtyCount","countryList","setCountryList","searchKey","setSearchKey","setChartLabels","setConfirmedLine","setDeathLine","selectedCountry","setSelectedCountry","Date","changeSelectedCountry","country","countryData","key","Slug","onClick","bind","Country","useEffect","then","response","Confirmed","Global","TotalConfirmed","Deaths","TotalDeaths","Countries","countryinfo","filter","error","sort","a","b","nameA","toLowerCase","nameB","Object","keys","confirmed","deaths","forEach","push","showCards","details","map","onChange","event","val","target","value","placeholder","length","o","includes","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4ec7a40c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst ApiStore = {\r\n    getGlobalCount : () => {\r\n        return axios.get('https://api.covid19api.com/summary');\r\n      },\r\n    \r\n    getCountryCount : (code) => {\r\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/latest`);\r\n    },\r\n\r\n    getCountryChartCount : (code, selectedDate, moment) => {\r\n    return axios.get(`https://api.covid19api.com/country/${code}?from=${moment(selectedDate).subtract(30 ,'days').format('YYYY-MM-DD')}&to=${moment(selectedDate).format('YYYY-MM-DD')}`)\r\n    },\r\n\r\n    getCountryCodes : () => {\r\n    return axios.get(`https://api.covid19api.com/countries`);\r\n    }\r\n}\r\n\r\nexport default ApiStore;\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"cards\">\r\n            <div className={`${props.label}-card`}>{props.label}</div>\r\n            <div className=\"count\">{props.count}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Chart = (props) => {\r\n    return (\r\n        <Line\r\n                width={500}\r\n                height={180}\r\n                data={{\r\n                  labels: props.chartLabels,\r\n                  datasets: [\r\n                    {\r\n                      label: 'Confirmed',\r\n                      fill: false,\r\n                      lineTension: 0.5,\r\n                      color: 'rgb(239,245,252,1)',\r\n                      backgroundColor: 'rgb(68,138,255,1)',\r\n                      pointBackgroundColor: 'rgb(68,138,255,0.8)',\r\n                      borderColor: 'rgb(68,138,255,1)',\r\n                      borderWidth: 2,\r\n                      data: props.confirmedLine\r\n                    },\r\n                    {\r\n                      label: 'Deaths',\r\n                      fill: false,\r\n                      lineTension: 0.5,\r\n                      color: 'rgb(239,245,252,1)',\r\n                      backgroundColor: 'rgb(255,82,82,1)',\r\n                      pointBackgroundColor: 'rgb(255,82,82,0.8)',\r\n                      borderColor: 'rgb(255,82,82,1)',\r\n                      borderWidth: 2,\r\n                      data: props.deathLine\r\n                    },\r\n                    // {\r\n                    //   label: 'Recovered',\r\n                    //   fill: false,\r\n                    //   lineTension: 0.5,\r\n                    //   color: 'rgb(239,245,252,1)',\r\n                    //   backgroundColor: 'rgb(178,255,89,1)',\r\n                    //   pointBackgroundColor: 'rgb(178,255,89,0.8)',\r\n                    //   borderColor: 'rgb(178,255,89,1)',\r\n                    //   borderWidth: 2,\r\n                    //   data: props.recoveredLine\r\n                    // }\r\n                  ]\r\n                }}\r\n                options={{\r\n                  title: {\r\n                    display: false\r\n                  },\r\n                  legend: {\r\n                    display: true,\r\n                    position: 'top'\r\n                  }\r\n                }}\r\n              />\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ApiStore from './apiStore'\r\nimport Card from './card';\r\nimport Chart from './chart';\r\n\r\nconst moment = require('moment');\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [globalCount, setGlobalCount] = useState({});\r\n  const [countryCount, setCounrtyCount] = useState({});\r\n  const [countryList, setCountryList] = useState([]);\r\n  const [searchKey, setSearchKey] = useState('');\r\n  const [chartLabels, setChartLabels] = useState([]);\r\n  const [confirmedLine, setConfirmedLine] = useState([]);\r\n  const [deathLine, setDeathLine] = useState([]);\r\n  const [recoveredLine, setRecoveredLine] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState({ \"Country\": 'India', \"Slug\": \"india\" });\r\n\r\n  const selectedDate = new Date();\r\n\r\n  const changeSelectedCountry = (country) => {\r\n    setSelectedCountry(country);\r\n  }\r\n\r\n  // To list the countries with and without search \r\n  const countryListData = () => {\r\n    if (searchKey) {\r\n      let result = countryList.filter(o => o.Country.toLowerCase().includes(searchKey.toLowerCase()));\r\n      return result.map((country) => countryData(country));\r\n    } else {\r\n      return countryList.map((country) => countryData(country));\r\n    }\r\n  }\r\n\r\n  // Returns each contry list row\r\n  const countryData = (data) => {\r\n    return (\r\n      <div key={data.Slug} className=\"country-row\" onClick={changeSelectedCountry.bind(null, data)}>\r\n        {data.Country}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Search for country\r\n  const searchHandler = (event) => {\r\n    const val = event.target.value;\r\n    setSearchKey(val);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Gets the global count\r\n    ApiStore.getGlobalCount().then((response) => {\r\n      setSummary(response.data);\r\n      setGlobalCount({\r\n        Confirmed: response.data.Global.TotalConfirmed,\r\n        Deaths: response.data.Global.TotalDeaths,\r\n        // Recovered: response.data.Global.TotalRecovered,\r\n        // Active: response.data.Global.TotalConfirmed - response.data.Global.TotalRecovered - response.data.Global.TotalDeaths\r\n      });\r\n      if (response.data.Countries) {\r\n        let countryinfo = response.data.Countries.filter((country) => {\r\n          return country.Slug === \"india\";\r\n        })\r\n        setCounrtyCount({\r\n          Confirmed: countryinfo[0].TotalConfirmed,\r\n          Deaths: countryinfo[0].TotalDeaths,\r\n        })\r\n      } else {\r\n        setCounrtyCount({\r\n          Confirmed: \"NA\",\r\n          Deaths: \"NA\",\r\n        })\r\n      }\r\n    }, (error) => {\r\n      setGlobalCount({\r\n        \"Confirmed\": \"NA\",\r\n        \"Deaths\": \"NA\",\r\n        // \"Recovered\": \"NA\",\r\n        // \"Active\": \"NA\"\r\n      })\r\n    });\r\n    // To get the country list and the corresponding 3 letter codes to get the covid data\r\n    ApiStore.getCountryCodes().then((response) => {\r\n      response.data.sort((a, b) => {\r\n        const nameA = a.Country.toLowerCase();\r\n        const nameB = b.Country.toLowerCase();\r\n        if (nameA < nameB) {\r\n          return -1;\r\n        }\r\n        if (nameA > nameB) {\r\n          return 1;\r\n        }\r\n        // names must be equal\r\n        return 0;\r\n      })\r\n      setCountryList(response.data);\r\n    })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Gets the country count for the last available day and for the last 30 days for the chart plot\r\n    // Takes 3 letter code of country to fetch the data \r\n    if (summary && summary.Countries) {\r\n      let countryinfo = summary.Countries.filter((country) => {\r\n        return country.Slug === selectedCountry.Slug;\r\n      })\r\n      setCounrtyCount({\r\n        Confirmed: countryinfo[0].TotalConfirmed,\r\n        Deaths: countryinfo[0].TotalDeaths,\r\n      })\r\n    }\r\n    ApiStore.getCountryChartCount(selectedCountry.Slug, selectedDate, moment).then((response) => {\r\n      const data = Object.keys(response.data);\r\n      const labels = [];\r\n      const confirmed = [];\r\n      // const recovered = [];\r\n      const deaths = [];\r\n      data.forEach((key) => {\r\n        confirmed.push(response.data[key].Confirmed);\r\n        // recovered.push(response.data.result[key].recovered);\r\n        deaths.push(response.data[key].Deaths);\r\n        labels.push(moment(response.data[key].Date, 'YYYY-MM-DD').format('MMM DD'));\r\n      })\r\n      setChartLabels(labels);\r\n      setConfirmedLine(confirmed);\r\n      setDeathLine(deaths);\r\n      // setRecoveredLine(recovered);\r\n    }, (error) => {\r\n    });\r\n  }, [selectedCountry]);\r\n\r\n  // Shows individual counts \r\n  const showCards = (details) => {\r\n    const data = Object.keys(details);\r\n    return data.map((key) => {\r\n      return <Card label={key} count={details[key]} />\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main-container\">\r\n        <div className=\"header\">\r\n          <span className=\"title\">COVID19</span>\r\n          <span className=\"date\">{moment(selectedDate).format('DD/MM/YYYY')}</span>\r\n        </div>\r\n        <div className=\"display-flex\">\r\n          <div className=\"card-block\">\r\n            <div className=\"card-container-title\">World</div>\r\n            <div className=\"card-container\">\r\n              {showCards(globalCount)}\r\n            </div>\r\n          </div>\r\n          <div className=\"card-block no-boder\">\r\n            <div className=\"card-container-title\">{selectedCountry.Country}</div>\r\n            <div className=\"card-container\">\r\n              {showCards(countryCount)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"details-container\">\r\n          <div className=\"left-panel\">\r\n            <input className=\"search-field\" onChange={searchHandler} value={searchKey} placeholder=\"Search by Country\" ></input>\r\n            <div className=\"country-list\">\r\n              {countryList && countryList.length ? countryListData() : <span>No list</span>}\r\n            </div>\r\n          </div>\r\n          <div className=\"right-panel\">\r\n            <div className=\"chart-container\">\r\n              <Chart chartLabels={chartLabels} confirmedLine={confirmedLine} deathLine={deathLine} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <div className=\"credits\">\r\n            <div>API : <code><a href=\"https://covidapi.info/\" rel=\"noopener noreferrer\" target=\"_blank\"> covidapi.info</a></code></div>\r\n            <div className=\"margin-left-20\">Dataset : <code><a href=\"https://github.com/CSSEGISandData/COVID-19\" rel=\"noopener noreferrer\" target=\"_blank\"> John Hopkins University</a></code></div>\r\n            <div className=\"margin-15\">\r\n              <code className=\"made-by\">Coded with <FavoriteIcon className=\"love\" /> by Prajwal\r\n                <a href=\"https://github.com/PrajwalMathad\" rel=\"noopener noreferrer\" target=\"_blank\"><i className=\"fab fa-github\"></i></a>\r\n              </code>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Dashboard from './dashboard';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Dashboard />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}