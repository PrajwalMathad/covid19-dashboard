{"version":3,"sources":["dashboard.js","serviceWorker.js","index.js"],"names":["moment","require","axios","CssTextField","withStyles","root","color","borderBottomColor","borderColor","TextField","useStyles","makeStyles","theme","display","flexWrap","margin","width","Dashboard","classes","useState","globalCount","setGlobalCount","countryCount","setCounrtyCount","countryList","setCountryList","searchKey","setSearchKey","Date","selectedDate","selectedCountry","setSelectedCountry","data","React","useMemo","label","axes","primary","type","position","changeSelectedCountry","country","countryData","className","onClick","bind","name","useEffect","get","then","response","result","error","code","alpha3Code","Object","keys","forEach","key","push","map","one","format","confirmed","deaths","recovered","active","onChange","event","val","target","value","variant","id","length","filter","o","toLowerCase","includes","style","height","href","rel","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mSAOMA,EAASC,EAAQ,IACjBC,EAAQD,EAAQ,IAEhBE,EAAeC,YAAW,CAC9BC,KAAM,CACJ,UAAW,CACTC,MAAO,cAET,UAAW,CACTA,MAAO,cAET,sBAAuB,CACrBA,MAAO,WAET,8BAA+B,CAC7BC,kBAAmB,WAErB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,cAEf,mBAAoB,CAClBA,YAAa,cAEf,yBAA0B,CACxBA,YAAa,cAtBAJ,CA0BlBK,KAEGC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCP,KAAM,CACJQ,QAAS,OACTC,SAAU,QAEZC,OAAQ,CACNA,OAAQ,iBACRC,MAAO,WA6LIC,EAzLG,WAChB,IAAMC,EAAUR,IADM,EAGgBS,mBAAS,IAHzB,mBAGfC,EAHe,KAGFC,EAHE,OAIkBF,mBAAS,IAJ3B,mBAIfG,EAJe,KAIDC,EAJC,OAKgBJ,mBAAS,IALzB,mBAKfK,EALe,KAKFC,EALE,OAMYN,mBAAS,IANrB,mBAMfO,EANe,KAMJC,EANI,OAOkBR,mBAAS,IAAIS,MAP/B,mBAOfC,EAPe,aAQwBV,mBAAS,CAAE,KAAQ,QAAS,WAAc,SARlE,mBAQfW,EARe,KAQEC,EARF,KAUhBC,EAAOC,IAAMC,SACjB,iBAAM,CACJ,CACEC,MAAO,WACPH,KAAM,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,KAE7C,CACEG,MAAO,WACPH,KAAM,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,QAG/C,IAGII,EAAOH,IAAMC,SACjB,iBAAM,CACJ,CAAEG,SAAS,EAAMC,KAAM,SAAUC,SAAU,UAC3C,CAAED,KAAM,SAAUC,SAAU,WAE9B,IAeIC,EAAwB,SAACC,GAC7BV,EAAmBU,IAYfC,EAAc,SAACV,GACnB,OACE,yBAAKW,UAAU,cAAcC,QAASJ,EAAsBK,KAAK,KAAMb,IACpEA,EAAKc,OA4CZ,OAlCAC,qBAAU,WArCD7C,EAAM8C,IAAI,uCAsCAC,MAAK,SAACC,GACrB7B,EAAe6B,EAASlB,KAAKmB,WAC5B,SAACC,SAGH,IAEHL,qBAAU,WA1Cc,IAACM,KA2CPvB,EAAgBwB,WA1CzBpD,EAAM8C,IAAN,+CAAkDK,EAAlD,aA0CqCJ,MAAK,SAACC,GACnCK,OAAOC,KAAKN,EAASlB,KAAKmB,QAClCM,SAAQ,SAACC,GACZnC,EAAgB2B,EAASlB,KAAKmB,OAAOO,UAEtC,SAACN,GACF7B,EAAgB,CACd,UAAa,MACb,OAAU,MACV,UAAa,MACb,OAAU,aAGb,CAACO,IAEJiB,qBAAU,WArDD7C,EAAM8C,IAAN,wCAsDWC,MAAK,SAACC,GACD,GACRS,KAAKT,EAASlB,KAAK4B,KAAI,SAACC,GACnC,MAAQ,CAAE,KAAQA,EAAIf,KAAM,KAAQe,EAAIP,gBAE1C7B,EAAeyB,EAASlB,WAEzB,IAGD,yBAAKW,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,SAAhB,WACA,0BAAMA,UAAU,QAAQ3C,EAAO6B,GAAciC,OAAO,gBAEtD,yBAAKnB,UAAU,gBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,wBAAwBb,EAAgBgB,MACvD,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,kBAAf,aACA,yBAAKA,UAAU,SAASrB,EAAayC,YAEvC,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,cAAf,SACA,yBAAKA,UAAU,SAASrB,EAAa0C,SAEvC,yBAAKrB,UAAU,SACb,yBAAKA,UAAU,kBAAf,aACA,yBAAKA,UAAU,SAASrB,EAAa2C,YAEvC,yBAAKtB,UAAU,SACb,yBAAKA,UAAU,eAAf,UACCrB,EAAa4C,OAAS,yBAAKvB,UAAU,SAASrB,EAAa4C,QAAgB,yBAAKvB,UAAU,SAASrB,EAAayC,UAAYzC,EAAa2C,UAAY3C,EAAa0C,WAIzK,yBAAKrB,UAAU,uBACb,yBAAKA,UAAU,wBAAf,UACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,kBAAf,aACA,yBAAKA,UAAU,SAASvB,EAAY2C,YAEtC,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,cAAf,SACA,yBAAKA,UAAU,SAASvB,EAAY4C,SAEtC,yBAAKrB,UAAU,SACb,yBAAKA,UAAU,kBAAf,aACA,yBAAKA,UAAU,SAASvB,EAAY6C,YAEtC,yBAAKtB,UAAU,SACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,SAASvB,EAAY2C,UAAY3C,EAAY6C,UAAY7C,EAAY4C,YAK5F,yBAAKrB,UAAU,qBACb,yBAAKA,UAAU,cACb,kBAACxC,EAAD,CAAcgE,SA5FF,SAACC,GACrB,IAAMC,EAAMD,EAAME,OAAOC,MACzB5C,EAAa0C,IA0FkCE,MAAO7C,EAAWiB,UAAWzB,EAAQH,OAAQoB,MAAM,oBAAoBqC,QAAQ,WAAWC,GAAG,8BACpI,yBAAK9B,UAAU,gBACZnB,GAAeA,EAAYkD,OA9GlChD,EACWF,EAAYmD,QAAO,SAAAC,GAAC,OAAIA,EAAE9B,KAAK+B,cAAcC,SAASpD,MACrDkC,KAAI,SAACnB,GAAD,OAAaC,EAAYD,MAEpCjB,EAAYoC,KAAI,SAACnB,GAAD,OAAaC,EAAYD,MA0GiB,2CAG7D,yBAAKE,UAAU,eACb,qDACA,yBACEoC,MAAO,CACL/D,MAAO,QACPgE,OAAQ,UAGV,kBAAC,QAAD,CAAOhD,KAAMA,EAAMI,KAAMA,OAK/B,yBAAKO,UAAU,UACb,4CAAiB,kBAAC,IAAD,CAAcA,UAAU,SAAzC,cACE,uBAAGsC,KAAK,mCAAmCC,IAAI,sBAAsBZ,OAAO,UAAS,uBAAGa,MAAM,wBCtNtFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgD,QAAQhD,MAAMA,EAAMiD,c","file":"static/js/main.b1aacaf2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Chart } from 'react-charts';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\n\nconst moment = require('moment');\nconst axios = require('axios');\n\nconst CssTextField = withStyles({\n  root: {\n    '& input': {\n      color: 'whitesmoke',\n    },\n    '& label': {\n      color: 'whitesmoke',\n    },\n    '& label.Mui-focused': {\n      color: '#448aff',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#448aff',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'whitesmoke',\n      },\n      '&:hover fieldset': {\n        borderColor: 'whitesmoke',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#448aff',\n      },\n    },\n  },\n})(TextField);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: '8px 8px 8px -0',\n    width: '90%'\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n\n  const [globalCount, setGlobalCount] = useState({});\n  const [countryCount, setCounrtyCount] = useState({});\n  const [countryList, setCountryList] = useState([]);\n  const [searchKey, setSearchKey] = useState('');\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [selectedCountry, setSelectedCountry] = useState({ \"name\": 'India', \"alpha3Code\": \"IND\" });\n\n  const data = React.useMemo(\n    () => [\n      {\n        label: 'Series 1',\n        data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\n      },\n      {\n        label: 'Series 2',\n        data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n      }\n    ],\n    []\n  )\n\n  const axes = React.useMemo(\n    () => [\n      { primary: true, type: 'linear', position: 'bottom' },\n      { type: 'linear', position: 'left' }\n    ],\n    []\n  )\n\n  const getGlobalCount = () => {\n    return axios.get('https://covidapi.info/api/v1/global');\n  }\n\n  const getCountryCount = (code) => {\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/latest`);\n  }\n\n  const getCountryCodes = () => {\n    return axios.get(`https://restcountries.eu/rest/v2/all`);\n  }\n\n  const changeSelectedCountry = (country) => {\n    setSelectedCountry(country);\n  }\n\n  const countryListData = () => {\n    if (searchKey) {\n      let result = countryList.filter(o => o.name.toLowerCase().includes(searchKey));\n      return result.map((country) => countryData(country));\n    } else {\n      return countryList.map((country) => countryData(country));\n    }\n  }\n\n  const countryData = (data) => {\n    return (\n      <div className=\"country-row\" onClick={changeSelectedCountry.bind(null, data)}>\n        {data.name}\n      </div>\n    )\n  }\n\n  const searchHandler = (event) => {\n    const val = event.target.value;\n    setSearchKey(val);\n  }\n\n  useEffect(() => {\n    getGlobalCount().then((response) => {\n      setGlobalCount(response.data.result);\n    }, (error) => {\n\n    });\n  }, []);\n\n  useEffect(() => {\n    getCountryCount(selectedCountry.alpha3Code).then((response) => {\n      const data = Object.keys(response.data.result);\n      data.forEach((key) => {\n        setCounrtyCount(response.data.result[key]);\n      })\n    }, (error) => {\n      setCounrtyCount({\n        \"confirmed\": \"N/A\",\n        \"deaths\": \"N/A\",\n        \"recovered\": \"N/A\",\n        \"active\": \"N/A\"\n      })\n    });\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    getCountryCodes().then((response) => {\n      const filteredlist = [];\n      filteredlist.push(response.data.map((one) => {\n        return ({ 'name': one.name, 'code': one.alpha3Code })\n      }));\n      setCountryList(response.data);\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className=\"header\">\n          <span className=\"title\">COVID19</span>\n          <span className=\"date\">{moment(selectedDate).format('DD/MM/YYYY')}</span>\n        </div>\n        <div className=\"display-flex\">\n          <div className=\"card-block\">\n            <div className=\"card-container-title\">{selectedCountry.name}</div>\n            <div className=\"card-container\">\n              <div className=\"cards\">\n                <div className=\"confirmed-card\">Confirmed</div>\n                <div className=\"count\">{countryCount.confirmed}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"death-card\">Death</div>\n                <div className=\"count\">{countryCount.deaths}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"recovered-card\">Recovered</div>\n                <div className=\"count\">{countryCount.recovered}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"active-card\">Active</div>\n                {countryCount.active ? <div className=\"count\">{countryCount.active}</div> : <div className=\"count\">{countryCount.confirmed - countryCount.recovered - countryCount.deaths}</div>}\n              </div>\n            </div>\n          </div>\n          <div className=\"card-block no-boder\">\n            <div className=\"card-container-title\">Global</div>\n            <div className=\"card-container\">\n              <div className=\"cards\">\n                <div className=\"confirmed-card\">Confirmed</div>\n                <div className=\"count\">{globalCount.confirmed}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"death-card\">Death</div>\n                <div className=\"count\">{globalCount.deaths}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"recovered-card\">Recovered</div>\n                <div className=\"count\">{globalCount.recovered}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"active-card\">Active</div>\n                <div className=\"count\">{globalCount.confirmed - globalCount.recovered - globalCount.deaths}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"details-container\">\n          <div className=\"left-panel\">\n            <CssTextField onChange={searchHandler} value={searchKey} className={classes.margin} label=\"Search by Country\" variant=\"outlined\" id=\"custom-css-outlined-input\" />\n            <div className=\"country-list\">\n              {countryList && countryList.length ? countryListData() : <span>No list</span>}\n            </div>\n          </div>\n          <div className=\"right-panel\">\n            <p>Wanna see some charts?</p>\n            <div\n              style={{\n                width: '400px',\n                height: '300px'\n              }}\n            >\n              <Chart data={data} axes={axes} />\n            </div>\n\n          </div>\n        </div>\n        <div className=\"footer\">\n          <code>Coded with <FavoriteIcon className=\"love\" /> by Prajwal \n            <a href=\"https://github.com/PrajwalMathad\" rel=\"noopener noreferrer\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>\n          </code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Dashboard from './dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}