{"version":3,"sources":["dashboard.js","serviceWorker.js","index.js"],"names":["moment","require","axios","CssTextField","withStyles","root","color","borderBottomColor","borderColor","TextField","useStyles","makeStyles","theme","display","flexWrap","margin","width","Dashboard","classes","useState","globalCount","setGlobalCount","countryCount","setCounrtyCount","countryList","setCountryList","searchKey","setSearchKey","chartLabels","setChartLabels","confirmedLine","setConfirmedLine","deathLine","setDeathLine","recoveredLine","setRecoveredLine","selectedCountry","setSelectedCountry","selectedDate","Date","changeSelectedCountry","country","countryData","data","key","alpha3Code","className","onClick","bind","name","useEffect","get","then","response","result","error","code","Object","keys","forEach","subtract","format","getCountryChartCount","labels","confirmed","recovered","deaths","push","date","map","one","active","onChange","event","val","target","value","label","variant","id","length","filter","o","toLowerCase","includes","height","datasets","fill","lineTension","backgroundColor","pointBackgroundColor","borderWidth","options","title","legend","position","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1f1367c1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { Line } from 'react-chartjs-2';\n\nconst moment = require('moment');\nconst axios = require('axios');\n\nconst CssTextField = withStyles({\n  root: {\n    '& input': {\n      color: 'whitesmoke',\n    },\n    '& label': {\n      color: 'whitesmoke'\n    },\n    '& label.Mui-focused': {\n      color: '#448aff',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#448aff',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'whitesmoke',\n      },\n      '&:hover fieldset': {\n        borderColor: 'whitesmoke',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#448aff',\n      },\n    },\n  },\n})(TextField);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: '1vw 1vw 1vw 0',\n    width: '90%'\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n\n  const [globalCount, setGlobalCount] = useState({});\n  const [countryCount, setCounrtyCount] = useState({});\n  const [countryList, setCountryList] = useState([]);\n  const [searchKey, setSearchKey] = useState('');\n  const [chartLabels, setChartLabels] = useState([]);\n  const [confirmedLine, setConfirmedLine] = useState([]);\n  const [deathLine, setDeathLine] = useState([]);\n  const [recoveredLine, setRecoveredLine] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState({ \"name\": 'India', \"alpha3Code\": \"IND\" });\n  \n  const selectedDate = new Date();\n\n  const getGlobalCount = () => {\n    return axios.get('https://covidapi.info/api/v1/global');\n  }\n\n  const getCountryCount = (code) => {\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/latest`);\n  }\n\n  const getCountryChartCount = (code) => {\n    return axios.get(`https://covidapi.info/api/v1/country/${code}/timeseries/${moment(selectedDate).subtract(30 ,'days').format('YYYY-MM-DD')}/${moment(selectedDate).format('YYYY-MM-DD')}`);\n  }\n\n  const getCountryCodes = () => {\n    return axios.get(`https://restcountries.eu/rest/v2/all`);\n  }\n\n  const changeSelectedCountry = (country) => {\n    setSelectedCountry(country);\n  }\n\n  const countryListData = () => {\n    if (searchKey) {\n      let result = countryList.filter(o => o.name.toLowerCase().includes(searchKey.toLowerCase()));\n      return result.map((country) => countryData(country));\n    } else {\n      return countryList.map((country) => countryData(country));\n    }\n  }\n\n  const countryData = (data) => {\n    return (\n      <div key={data.alpha3Code} className=\"country-row\" onClick={changeSelectedCountry.bind(null, data)}>\n        {data.name}\n      </div>\n    )\n  }\n\n  const searchHandler = (event) => {\n    const val = event.target.value;\n    setSearchKey(val);\n  }\n\n  useEffect(() => {\n    getGlobalCount().then((response) => {\n      setGlobalCount(response.data.result);\n    }, (error) => {\n\n    });\n  }, []);\n\n  useEffect(() => {\n    getCountryCount(selectedCountry.alpha3Code).then((response) => {\n      const data = Object.keys(response.data.result);\n      data.forEach((key) => {\n        setCounrtyCount(response.data.result[key]);\n      })\n    }, (error) => {\n      setCounrtyCount({\n        \"confirmed\": \"N/A\",\n        \"deaths\": \"N/A\",\n        \"recovered\": \"N/A\",\n        \"active\": \"N/A\"\n      })\n    });\n\n    getCountryChartCount(selectedCountry.alpha3Code).then((response) => {\n      const data = Object.keys(response.data.result);\n      const labels = [];\n      const confirmed = [];\n      const recovered = [];\n      const deaths = [];\n      data.forEach((key) => {\n        confirmed.push(response.data.result[key].confirmed);\n        recovered.push(response.data.result[key].recovered);\n        deaths.push(response.data.result[key].deaths);\n        labels.push(moment(response.data.result[key].date, 'YYYY-MM-DD').format('MMM DD'));\n      })\n      setChartLabels(labels);\n      setConfirmedLine(confirmed);\n      setDeathLine(deaths);\n      setRecoveredLine(recovered);\n    }, (error) => {\n    });\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    getCountryCodes().then((response) => {\n      const filteredlist = [];\n      filteredlist.push(response.data.map((one) => {\n        return ({ 'name': one.name, 'code': one.alpha3Code })\n      }));\n      setCountryList(response.data);\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className=\"header\">\n          <span className=\"title\">COVID19</span>\n          <span className=\"date\">{moment(selectedDate).format('DD/MM/YYYY')}</span>\n        </div>\n        <div className=\"display-flex\">\n          <div className=\"card-block\">\n            <div className=\"card-container-title\">Global</div>\n            <div className=\"card-container\">\n              <div className=\"cards\">\n                <div className=\"confirmed-card\">Confirmed</div>\n                <div className=\"count\">{globalCount.confirmed}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"death-card\">Death</div>\n                <div className=\"count\">{globalCount.deaths}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"recovered-card\">Recovered</div>\n                <div className=\"count\">{globalCount.recovered}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"active-card\">Active</div>\n                <div className=\"count\">{globalCount.confirmed - globalCount.recovered - globalCount.deaths}</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-block no-boder\">\n            <div className=\"card-container-title\">{selectedCountry.name}</div>\n            <div className=\"card-container\">\n              <div className=\"cards\">\n                <div className=\"confirmed-card\">Confirmed</div>\n                <div className=\"count\">{countryCount.confirmed}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"death-card\">Death</div>\n                <div className=\"count\">{countryCount.deaths}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"recovered-card\">Recovered</div>\n                <div className=\"count\">{countryCount.recovered}</div>\n              </div>\n              <div className=\"cards\">\n                <div className=\"active-card\">Active</div>\n                {countryCount.active ? <div className=\"count\">{countryCount.active}</div> : <div className=\"count\">{countryCount.confirmed - countryCount.recovered - countryCount.deaths}</div>}\n              </div>\n\n            </div>\n          </div>\n        </div>\n        <div className=\"details-container\">\n          <div className=\"left-panel\">\n            <CssTextField onChange={searchHandler} value={searchKey} className={classes.margin} label=\"Search by Country\" variant=\"outlined\" id=\"custom-css-outlined-input\" />\n            <div className=\"country-list\">\n              {countryList && countryList.length ? countryListData() : <span>No list</span>}\n            </div>\n          </div>\n          <div className=\"right-panel\">\n            <div className=\"chart-container\">\n              <Line\n                width={500}\n                height={180}\n                data={{\n                  labels: chartLabels,\n                  datasets: [\n                    {\n                      label: 'Confirmed',\n                      fill: false,\n                      lineTension: 0.5,\n                      color: 'rgb(239,245,252,1)',\n                      backgroundColor: 'rgb(68,138,255,1)',\n                      pointBackgroundColor: 'rgb(68,138,255,0.8)',\n                      borderColor: 'rgb(68,138,255,1)',\n                      borderWidth: 2,\n                      data: confirmedLine\n                    },\n                    {\n                      label: 'Deaths',\n                      fill: false,\n                      lineTension: 0.5,\n                      color: 'rgb(239,245,252,1)',\n                      backgroundColor: 'rgb(255,82,82,1)',\n                      pointBackgroundColor: 'rgb(255,82,82,0.8)',\n                      borderColor: 'rgb(255,82,82,1)',\n                      borderWidth: 2,\n                      data: deathLine\n                    },\n                    {\n                      label: 'Recovered',\n                      fill: false,\n                      lineTension: 0.5,\n                      color: 'rgb(239,245,252,1)',\n                      backgroundColor: 'rgb(178,255,89,1)',\n                      pointBackgroundColor: 'rgb(178,255,89,0.8)',\n                      borderColor: 'rgb(178,255,89,1)',\n                      borderWidth: 2,\n                      data: recoveredLine\n                    }\n                  ]\n                }}\n                options={{\n                  title: {\n                    display: false\n                  },\n                  legend: {\n                    display: true,\n                    position: 'top'\n                  }\n                }}\n              />\n            </div>\n\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"credits\">\n            <div>API : <code><a href=\"https://covidapi.info/\" rel=\"noopener noreferrer\" target=\"_blank\"> covidapi.info</a></code></div>\n            <div className=\"margin-left-20\">Dataset : <code><a href=\"https://github.com/CSSEGISandData/COVID-19\" rel=\"noopener noreferrer\" target=\"_blank\"> John Hopkins University</a></code></div>\n            <div className=\"margin-15\">\n              <code className=\"made-by\">Coded with <FavoriteIcon className=\"love\" /> by Prajwal\n              <a href=\"https://github.com/PrajwalMathad\" rel=\"noopener noreferrer\" target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n              </code>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Dashboard from './dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}